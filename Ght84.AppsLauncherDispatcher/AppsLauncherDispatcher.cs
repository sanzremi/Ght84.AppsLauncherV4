using Ght84.AppsLauncherLibrary.Helpers;
using Ght84.AppsLauncherLibrary.InterProcessCommunication;
using Ght84.AppsLauncherLibrary.UdpCommunication;
using NLog;
using System;
using System.IO.Pipes;
using System.ServiceProcess;

namespace Ght84.AppsLauncherDispatcher
{
    public partial class AppsLauncherDispatcher : ServiceBase
    {
        private UdpReceiver _udpReceiver;

        private static Logger _logger = LogManager.GetCurrentClassLogger();

        private int _udpPort;
        private string _pipeName;



        public AppsLauncherDispatcher()
        {
            // Generated by Visual Studio
            InitializeComponent();

        }

        // Code to execute when windows service starts 
        protected override void OnStart(string[] args)
        {

            _logger.Info($"Début démarrage du service Windows Ght84.AppsLauncherDispatcher");

            try
            {
                //Lecture des paramètres dans le fichier de configuration app.config
                _udpPort = ConfigurationHelper.WrapperToDispatcherUdpPort;
                _pipeName = ConfigurationHelper.DispatcherToManagerIpcPipeName;
                

                // ouverture du socket UDP (en attente d'une message du client Ght84.AppsLauncherWrapper)
                _udpReceiver = new UdpReceiver(_udpPort);
                // Evenement à déclencher sur réception d'un message Ght84.AppsLauncherWrapper
                _udpReceiver.OnMessageReceived += Udp_OnNewMessageReceived;
                // Démarrage de l'écoute sur le port UDP
                _udpReceiver.Start();

                _logger.Info($"Démarrage réussi du service Windows Ght84.AppsLauncherDispatcher");
                _logger.Info($"Démarrage du socket sur le port UDP {_udpPort.ToString()}, en attente d'un message depuis le client Ght84.AppsLauncherWrapper");
                
            }
            catch (Exception ex)
            {
                _logger.Error($"Une erreur s'est produite pendant le démarrage du service Windows Ght84.AppsLauncherDispatcher : {ex.Message}");
            }


        }

        protected override void OnStop()
        {

            _logger.Info($"Début arrêt du service Windows Ght84.AppsLauncherDispatcher");

            try
            {                
                // fermeture du socket UDP (client Ght84.AppsLauncherWrapper)
                if (_udpReceiver != null) _udpReceiver.Stop();

                // Code to execute when windows service stops
                _logger.Info($"Arrêt réussi du service Windows Ght84.AppsLauncherDispatcher");

            }
            catch (Exception ex)
            {
                _logger.Error($"Une erreur s'est produite pendant l'arrêt du service Windows Ght84.AppsLauncherDispatcher : {ex.Message}");
            }

        }



        protected void Udp_OnNewMessageReceived(object sender, UdpReceivedMessageArgs args)
        {
            // Exemple args.Message reçu (format JSON avec valeurs encodées en base64)
            // { "COMMAND":"Tk9URVBBRA==","ENV":"UFJE","WINDOWS_HOSTNAME":"RFQtMUxaVDZS","WINDOWS_USERNAME":"MDUxMjg0","WINDOWS_USERDOMAIN":"QURDSEE=","WINDOWS_USERDNSDOMAIN":"QURDSEEuTE9DQUw="}

            _logger.Info($"Réception du message depuis Ght84.AppsLauncherWrapper : {args.Message}");
            Console.WriteLine($"Réception du message depuis Ght84.AppsLauncherWrapper : {args.Message}");

            int activeWindowsSessionId;
            string pipeNameWithSessionId = string.Empty;

     

            try
            {
                // Récupération du Numéro (Id) de la session active Windows (session où l'utilisateur est connecté)
                activeWindowsSessionId = WindowsSessionHelper.GetActiveWindowsSession().Id;
                pipeNameWithSessionId = $"{_pipeName}_{activeWindowsSessionId}";

                // Connection au serveur Ipc (c'est à dire l'exe AppsLauncherManager sur la session active Windows) sur le canal 'pipeName'
                IpcClient ipcClient = new IpcClient(pipeNameWithSessionId);
                // Routage du message vers le AppsLauncherManager.exe de la session Windows Active
                ipcClient.SendMessage(args.Message);


                _logger.Info($"Redirection du message vers Ght84.AppsLauncherManager de la session Windows active par Ipc canal {pipeNameWithSessionId}");


            }
            catch (Exception ex)
            {
                _logger.Error($"Echec de la redirection du message vers Ght84.AppsLauncherManager de la session Windows active par Ipc canal {pipeNameWithSessionId} : {ex.Message}");
            }

        }



    }
}
